* Overview
** Componentization for the web
Software componentization
- when you break your software system down into smaller easily identifiable pieces that have well-defined interfaces - and you do this in a specific way (i.e. by following a component model)

Decomposition vs composition
- the traditional development process is to break down a large problem into sub-problems and solve those
- design by composition starts by putting existing components together towards the product requirements

The goal
- by investing in a component-based approach to build components that are well-defined and flexible we get the payoff when we re-use it - the next time around - and component evolution (including bug fixes) will payoff multiplicatively

Source: [[http://blogs.windriver.com/koning/2006/09/components.html][Software Componentization]]

** Web components: an emerging standard
- previous attempts by Microsoft ([[http://www.w3.org/TR/NOTE-HTMLComponents][HTML Components]]) and Mozilla ([[http://www.w3.org/TR/2001/NOTE-xbl-20010223/][XBL]], [[http://www.w3.org/TR/xbl/][XBL2]]) to introduce componentization standards failed
- Google's attempt to standardize web components (and Polymer) seems to be succeeding -- different web browsers are starting to implement web components natively
  - instead of pushing a single monolithic standard, a handful of smaller interrelated standards were pushed, with varying levels of adoption
- different JavaScript libraries (eg, Angular) are aligning towards componentization

** Polymer: opinionated approach to web components
- a lightweight sugaring layer on top of the web components APIs
- Polymer 1.0's goal: make development using web components easier and faster by:
  - providing a library and scaffolds for making new custom elements
  - providing its own libraries of ready-made custom elements
  - providing its own extensions of the existing web components
- "it's a library, not a framework"
  - emphasis on interoperability: integrating Polymer with other frameworks should be doable

[[file:images/layers-of-polymer.png]]

* Intro to Web Components
** The components
*** Custom Elements
http://w3c.github.io/webcomponents/spec/custom/

*Custom elements* "define an extension point for the HTML parser to be able to recognize a new 'custom element' name and provide it with a JavaScript-backed object model automatically" /([[https://blogs.windows.com/msedgedev/2015/07/14/bringing-componentization-to-the-web-an-overview-of-web-components/][Bringing Componentization to the Web]])/

Example:
#+BEGIN_SRC html
<my-avatar service="twitter" username="matz_translated" />
#+END_SRC

#+BEGIN_SRC javascript
var MyAvatarPrototype = Object.create(HTMLElement.prototype);

MyAvatarPrototype.createdCallback = function() {
  var username = this.getAttribute('username');
  var service = this.getAttribute('service');

  var url = 'http://avatars.io/' + service + '/' + username;

  var img = document.createElement('img');
  img.setAttribute('src', url);
  this.appendChild(img);
};

document.registerElement('my-avatar', {
  prototype: MyAvatarPrototype
});
#+END_SRC
/(Example from [[https://www.youtube.com/watch?v=BG4KHxASs_A][Phil Leggetter's DevWeek presentation]])/

*is attribute*
- a native element can be given a custom element name and API capabilities

Example:
#+BEGIN_SRC html
<button is="mega-button">
#+END_SRC

#+BEGIN_SRC javascript
var MegaButton = document.createElement('mega-button', {
  prototype: Object.create(HTMLButtonElement.prototype),
  extends: 'button'
});
#+END_SRC
/(Example from [[http://www.html5rocks.com/en/tutorials/webcomponents/customelements/][Custom Elements - HTML5 Rocks]])/

Note:
- custom element names *must contain a dash (-)*
  - the parser distinguishes between custom elements and regular HTML elements this way

*Lifecycle callback methods* (optional)
- createdCallback
- attachedCallback
- detachedCallback
- attributeChangedCallback(attribute, oldVal, newVal)

*** Templates
http://www.w3.org/TR/html5/scripting-1.html#the-template-element

From [[https://blogs.windows.com/msedgedev/2015/07/14/bringing-componentization-to-the-web-an-overview-of-web-components/][Bringing Componentization to the Web]]:
- this early web components feature is now part of the [[http://www.w3.org/TR/html5/][HTML5 recommendation]]
- the template element introduced the concept of inertness (template's children don't trigger downloads or respond to user input, etc.) and was the first way to declaratively create a disconnected element subtree in HTML
- templates may be used for a variety of things from template-stamping and data-binding to conveying the content of a shadow DOM

Example:
#+BEGIN_SRC html
<template id="mytemplate">
  <img src="" alt="great image">
  <div class="comment"></div>
</template>
#+END_SRC

#+BEGIN_SRC javascript
var t = document.querySelector('#mytemplate');
// Populate the src at runtime.
t.content.querySelector('img').src = 'logo.png';

var clone = document.importNode(t.content, true);
document.body.appendChild(clone);
#+END_SRC
/(Example from [[http://www.html5rocks.com/en/tutorials/webcomponents/customelements/][Custom Elements - HTML5 Rocks]])/

*Gotchas*
- no way to prerender a template (cannot preload assets, process JS, download initial CSS, etc.)
- be careful with nested templates: nested templates require that their children also be manually activated

*** Shadow DOM
http://w3c.github.io/webcomponents/spec/shadow/

From [[https://blogs.windows.com/msedgedev/2015/07/14/bringing-componentization-to-the-web-an-overview-of-web-components/][Bringing Componentization to the Web]]:
- provides an imperative API for creating a separate tree of elements that can be connected (only once) to a host element
- these "shadow" children replace the "real" children when rendering the document

Example:
#+BEGIN_SRC html
<button>Hello, world!</button>
<script>
var host = document.querySelector('button');
var root = host.createShadowRoot();
root.textContent = 'こんにちは、影の世界!';
</script>
#+END_SRC

[[file:images/shadow-root.png]]

*Benefits*
- DOM/CSS "scoping"/protection (prevents CSS from leaking into a custom element)
- encapsulation

Example:
#+BEGIN_SRC html
<div id="nameTag">Matz</div>

<template id="nameTagTemplate">
  <style>
  .outer {
    border: 2px solid brown;
    border-radius: 1em;
    background: red;
    font-size: 20pt;
    width: 12em;
    height: 7em;
    text-align: center;
  }
  .boilerplate {
    color: white;
    font-family: sans-serif;
    padding: 0.5em;
  }
  .name {
    color: black;
    background: white;
    font-family: "Marker Felt", cursive;
    font-size: 45pt;
    padding-top: 0.2em;
  }
  </style>
  <div class="outer">
    <div class="boilerplate">
      Hi! My name is
    </div>
    <div class="name">
      <content></content>
    </div>
  </div>
</template>

<script>
  var shadow = document.querySelector('#nameTag').createShadowRoot();
  var template = document.querySelector('#nameTagTemplate');
  var clone = document.importNode(template.content, true);
  shadow.appendChild(clone);
</script>
#+END_SRC

/(Examples from [[http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/][Shadow DOM 101 - HTML5 Rocks]])/

*Other features*
- multiple shadow roots for a host
- nested shadow roots

*** HTML Imports
http://w3c.github.io/webcomponents/spec/imports/

From [[https://blogs.windows.com/msedgedev/2015/07/14/bringing-componentization-to-the-web-an-overview-of-web-components/][Bringing Componentization to the Web]]:
- defines a declarative syntax to "import" (request, download and parse) HTML into a document
- imports (using a link element's rel="import") execute the imported document's script in the context of the host page (thus having access to the same global object and state)
- the HTML, JavaScript, and CSS parts of a web component can be conveniently deployed using a single import

Example:
#+BEGIN_SRC html
<link rel="import" href="bootstrap.html" />
#+END_SRC

bootstrap.html:
#+BEGIN_SRC html
<link rel="stylesheet" href="bootstrap.css">
<link rel="stylesheet" href="fonts.css">
<script src="jquery.js"></script>
<script src="bootstrap.js"></script>
<script src="bootstrap-tooltip.js"></script>
<script src="bootstrap-dropdown.js"></script>
...

<!-- scaffolding markup -->
<template>
  ...
</template>
#+END_SRC

Notes:
- imports that reference the same URL are only retrieved once (the browser's network stack automatically checks for duplicates)
  - dependency management
- to load content from another domain, the URL of an import (the import location) needs to be CORS-enabled (see [[https://en.wikipedia.org/wiki/Cross-origin_resource_sharing][Cross-origin resource sharing on Wikipedia]])

*Using the content*
- an imported file's contents are inert until you use them (ie, with JavaScript)

Example:
#+BEGIN_SRC html
<head>
  <link rel="import" href="warnings.html">
</head>
<body>
  ...
  <script>
    var link = document.querySelector('link[rel="import"]');
    var content = link.import;

    // Grab DOM from warning.html's document.
    var el = content.querySelector('.warning');

    document.body.appendChild(el.cloneNode(true));
  </script>
</body>
#+END_SRC

warnings.html:
#+BEGIN_SRC html
<div class="warning">
  <style scoped>
    h3 {
      color: red;
    }
  </style>
  <h3>Warning!</h3>
  <p>This page is under construction</p>
</div>

<div class="outdated">
  <h3>Heads up!</h3>
  <p>This content may be out of date</p>
</div>
#+END_SRC
/(Example from [[http://www.html5rocks.com/en/tutorials/webcomponents/imports/][HTML Imports - HTML5 Rocks]])/

*Scripting in imports* /(from  [[http://www.html5rocks.com/en/tutorials/webcomponents/imports/][HTML Imports - HTML5 Rocks]])/
- an import can access its own DOM and/or the DOM of the page that's importing it
- script in the import is executed in the context of the window that contains the importing document
- scripts in an import are processed in order, but do not block the main document parsing
- scripts execute at import time, stylesheets, markup, and other resources need to be added to the main page explicitly

** Browser support
http://jonrimmer.github.io/are-we-componentized-yet/

[[file:images/are-we-componentized-yet.png]]

Note:
- Mozilla no longer supports HTML imports because of ES6 (see [[https://hacks.mozilla.org/2014/12/mozilla-and-web-components/][Mozilla and Web Components: Update]], 15 Dec 2014)

** Polyfills
- polyfill: downloadable code that implements features not yet supported natively by a browser
- for browsers that don't support certain web components, the ff. are available via [[https://github.com/WebComponents/webcomponentsjs][webcomponents.js]]:
  - Custom Elements
  - HTML Imports
  - Shadow DOM
  - also includes MutationObserver and WeakMap
- [[https://github.com/webcomponents/webcomponentsjs/blob/master/webcomponents-lite.js][webcomponents-lite.js]] excludes Shadow DOM

* Intro to Polymer
** Setup requirements
- Installation instructions
  - [[https://www.polymer-project.org/1.0/docs/start/getting-the-code.html][Full Polymer library]]
  - [[https://elements.polymer-project.org/guides/using-elements#installing-elements][Individual elements]]
- Recommended: install via Bower (requires Node.js/npm)
- Or download the zip archive
  - updating the dependencies/adding new elements requires downloading a new zip archive unless you convert to Bower

** Shady DOM
Shady DOM vs shadow DOM polyfill
- web components require tree-scoping for proper encapsulation
- shadow DOM is the standard that implements tree-scoping, but it's not yet universally implemented
- polyfilling shadow DOM is hard, the robust polyfill is invasive and slow
- shady DOM is a super-fast shim for shadow DOM that provides tree-scoping, but has drawbacks -- most importantly, one must use the shady DOM APIs to work with scoped trees
- the annoying bits of shady DOM are exactly the reasons why shadow DOM needs to be native across platforms

Shady DOM is compatible with shadow DOM
- the shady DOM API can optionally employ real shadow DOM where it's available
- you can write one code base that works on all platforms, but you enjoy improved performance and robustness on platforms that implement Shadow DOM

Source: [[https://www.polymer-project.org/1.0/articles/shadydom.html][What is shady DOM?]]

** Vulcanize
https://github.com/Polymer/vulcanize

- the more HTML imports you have, the more requests your app will make
- Vulcanize reduces an HTML file and its dependent HTML Imports into one file
- in the future, technologies such as [[http://en.wikipedia.org/wiki/HTTP/2][HTTP/2]] and [[https://http2.github.io/faq/#whats-the-benefit-of-server-push][Server Push]] will likely obsolete the need for a tool like Vulcanize for production uses

** Web Component Tester
https://github.com/Polymer/web-component-tester

- a browser-based testing environment
- WCT will run your tests against whatever browsers you have locally installed, or remotely via Sauce Labs
- test suites in HTML or JS files

** Features
Source: [[https://www.polymer-project.org/1.0/docs/devguide/feature-overview.html][dev guide feature overview]]

*** Registration and lifecycle
- Registering an element associates a class (prototype) with a custom element name

Example:
#+BEGIN_SRC html
MyElement = Polymer({
  is: 'my-element',

  created: function() {
    this.textContent = 'My element!';
  }
});
#+END_SRC

*Extending native elements*
#+BEGIN_SRC html
MyInput = Polymer({
  is: 'my-input',
  extends: 'input',

  created: function() {
    this.style.border = '1px solid red';
  }
});
#+END_SRC

*Polymer's lifecycle callbacks*
- created
- attached
- detached
- attributeChanged
- ready
  - invoked when Polymer has finished creating and initializing the element's local DOM

*** Declared properties
- Declared properties can be configured from markup using attributes
- Declared properties can optionally support change observers, two-way data binding, and reflection to attributes
- You can also declare computed properties and read-only properties

Examples:
#+BEGIN_SRC html
Polymer({
  is: 'x-custom',

  properties: {
    disabled: {
      type: Boolean,
      observer: '_disabledChanged'
    }
  },

  _disabledChanged: function(newValue, oldValue) {
    this.toggleClass('disabled', newValue);
    this.highlight = true;
  }
});
#+END_SRC

#+BEGIN_SRC html
Polymer({
  is: 'x-custom',

  properties: {
    first: String,
    last: String,

    fullName: {
      type: String,
      // when `first` or `last` changes `computeFullName` is called once
      // and the value it returns is stored as `fullName`
      computed: 'computeFullName(first, last)'
    } 
  },

  computeFullName: function(first, last) {
    return first + ' ' + last;
  }
});
#+END_SRC

*** Local DOM
- Local DOM is the DOM created and managed by the element (ie, shady DOM + shadow DOM)
- Polymer uses shady DOM by default
- shady DOM requires you to use the [[https://www.polymer-project.org/1.0/docs/devguide/local-dom.html#dom-api][Polymer DOM API]]

*** Events
- Attaching event listeners to the host object and local DOM children

Example:
#+BEGIN_SRC html
<dom-module id="x-custom">
  <template>
    <button on-click="handleClick">Kick Me</button>
  </template>

  <script>
    Polymer({
      is: 'x-custom',

      handleClick: function() {
        alert('Ow!');
      }
    });
  </script>
</dom-module>
#+END_SRC

*** Data binding
- Data binding binds a property or sub-property of a custom element (the host element) to a property or attribute of an element in its local DOM (the child or target element)

*Binding annotations*
- Square brackets =[[]]= create one-way bindings. Data flow is downward, host-to-child, and the binding never modifies the host property.
- Curly brackets ={{}}= create automatic bindings. Data flow is one-way or two-way, depending whether the target property is configured for two-way binding.

Example:
#+BEGIN_SRC html
<dom-module id="host-element">
    <template>
      <child-element name="{{myName}}"></child-element>  
    </template>
</dom-module>
#+END_SRC

*** Behaviors
- Behaviors are reusable modules of code that can be mixed into Polymer elements
- To add a behavior to a Polymer element definition, include it in a =behaviors= array on the prototype

Example:
#+BEGIN_SRC html
<link rel="import" href="highlight-behavior.html">

<script>
  Polymer({
    is: 'my-element',
    behaviors: [HighlightBehavior]
  });
</script>
#+END_SRC

highlight-behavior.html:
#+BEGIN_SRC html
<script>
    HighlightBehavior = {

      properties: {
        isHighlighted: {
          type: Boolean,
          value: false,
          notify: true,
          observer: '_highlightChanged'
        }
      },
      
      listeners: {
        click: '_toggleHighlight'
      },
      
      created: function() {
        console.log('Highlighting for ', this, 'enabled!');
      },

      _toggleHighlight: function() {
        this.isHighlighted = !this.isHighlighted;
      },
      
      _highlightChanged: function(value) {
        this.toggleClass('highlighted', value);
      }

    };
</script>
#+END_SRC

** Polymer element categories
From the [[https://elements.polymer-project.org/guides/using-elements][elements guide]] and the [[https://elements.polymer-project.org/][elements catalog]]:

- Iron elements
  - A set of utility elements including generic UI elements (such as icons, input and layout components), as well as non-UI elements providing features like AJAX, signaling and storage
- Paper elements
  - A set of UI elements that implement the [[http://www.google.com/design/spec/material-design/introduction.html][material design system]]
- Gold elements
  - Form elements for ecommerce
- Neon elements
  - Animation-related elements
- Platinum elements
  - Elements for app-like features, like push notifications, offline caching and bluetooth
- Google Web components
  - Components for Google's API and services
- Molecules
  - Wrappers for third-party libraries

* Assessment
** Pros
- Polymer is being pushed by Google
  - active community, well-documented, ongoing development
- existing suite of reusable components available
- custom elements for Google APIs available

** Cons
- opinionated approach to web components (YMMV)
- automagical code
  - part of the ramp-up for a new dev is learning how to code the Polymer way (eg, shady DOM, custom properties extensions, etc)
- integration with frameworks: trial and error
- currently not possible to choose whatever subset of Polymer 1.0's features you want
  - the [[https://www.polymer-project.org/1.0/docs/devguide/experimental.html][experimental features guide]] describes =polymer-mini.html= and =polymer-micro.html=, which are smaller subsets of =polymer.html= (subject to change in future releases)

* Resources
** Polymer
Project sites
- https://www.polymer-project.org/1.0/
- https://elements.polymer-project.org/

Sep 2015 summit
- https://www.polymer-project.org/summit/
  - [[https://codelabs.developers.google.com/polymer-summit][Codelabs]]
  - [[https://www.youtube.com/playlist?list=PLNYkxOF6rcICdISJclfQhj2S8QZGjXV8J][Videos]]

Communities
- [[https://plus.google.com/u/1/communities/115626364525706131031][Google+]]

GitHub
- https://github.com/Polymer/polymer
- https://github.com/Polymer/web-component-tester
- https://github.com/PolymerElements/polymer-starter-kit
  - [[https://www.polymer-project.org/1.0/docs/start/psk/set-up.html][Set-up tutorial]]

Polycasts
- [[https://www.youtube.com/playlist?list=PLOU2XLYxmsII5c3Mgw6fNYCzaWrsM3sMN][Youtube playlist page]]

Articles
- [[https://www.polymer-project.org/1.0/articles/shadydom.html][What is shady DOM?]] (28 May 2015)

Presentations
- [[http://webcomponents.org/presentations/componentize-your-app-with-polymer-elements/][Componentize your app with Polymer Elements]]
  - [[https://speakerdeck.com/robdodson/componentize-your-app-with-polymer][slide deck]]

Related sites
- http://builtwithpolymer.org/

** Web Components
Project sites
- http://webcomponents.org/
- http://www.w3.org/wiki/WebComponents/

Communities
- https://plus.google.com/+WebcomponentsOrg

GitHub
- https://github.com/WebComponents/webcomponentsjs (polyfills suite)

Specs
- [[http://w3c.github.io/webcomponents/explainer/][intro to web components]]
- [[http://w3c.github.io/webcomponents/spec/custom/][custom elements]]
- [[http://w3c.github.io/webcomponents/spec/imports/][HTML imports]]
- [[https://html.spec.whatwg.org/multipage/scripting.html#the-template-element][templates]]
- [[http://w3c.github.io/webcomponents/spec/shadow/][shadow DOM]]

Polyfills
- [[http://webcomponents.org/polyfills/][polyfills]]

Other Web Component projects
- [[https://github.com/basic-web-components/basic-web-components][Basic Web Components library]] (from Component Kitchen)
- [[https://github.com/webcomponents/gold-standard/wiki][The Gold Standard Checklist for Web Components]] (from Component Kitchen)

Articles
- [[https://blogs.windows.com/msedgedev/2015/07/14/bringing-componentization-to-the-web-an-overview-of-web-components/][Bringing componentization to the web: An overview of Web Components - Microsoft Edge Dev Blog]] (14 July 2015)
- [[http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/][Shadow DOM 101 - HTML5 Rocks]] (updated 18 Dec 2013)
- [[http://www.html5rocks.com/en/tutorials/webcomponents/template/][HTML's New Template Tag - HTML5 Rocks]] (updated 18 Dec 2013)
- [[http://www.html5rocks.com/en/tutorials/webcomponents/imports/][HTML Imports - HTML5 Rocks]] (updated 18 Dec 2013)
- [[http://www.html5rocks.com/en/tutorials/webcomponents/customelements/][Custom Elements - HTML5 Rocks]] (updated 18 Dec 2013)

Presentations
- [[https://www.youtube.com/watch?v=BG4KHxASs_A][Why you should be using Web Components now, and how]] - DevWeek 2015 (published 30 Oct 2015)
  - [[http://www.slideshare.net/leggetter/why-you-should-be-using-web-components-and-how][slide deck]]
